СОЗДАНИЕ ТАБЛИЦЫ:


CREATE TABLE IF NOT EXISTS "regions" (
	id serial PRIMARY KEY,
	name VARCHAR
);

INSERT INTO regions (name) VALUES 
('Valencia'),
('Catalunia'),
('Aragon'),
('Extremadura');

CREATE TABLE IF NOT EXISTS "locations" (
	id SERIAL PRIMARY KEY,
	address VARCHAR,
	region_id INTEGER REFERENCES regions (id)
);

INSERT INTO locations (address, region_id) VALUES 
('Primero Calle', 1), ('Segundo Calle', 2), ('Tercero Calle', 3), ('Cuarto Calle', 4),  
('Primero Calle', 2), ('Segundo Calle', 3), ('Tercero Calle', 4), ('Cuarto Calle', 1), 
('Primero Calle', 3), ('Segundo Calle', 4), ('Tercero Calle', 1), ('Cuarto Calle', 2), 
('Primero Calle', 4), ('Segundo Calle', 1), ('Tercero Calle', 2), ('Cuarto Calle', 3);

CREATE TABLE IF NOT EXISTS "departments" (
	id SERIAL PRIMARY KEY,
	name VARCHAR,
	location_id INTEGER REFERENCES locations (id),
	manager_id INTEGER
);

INSERT INTO departments (name, location_id, manager_id) VALUES 
('MainDep', 1, 3), ('SecondDep', 5, 2), 
('ThirdDep', 9, 1), ('FourthDep', 12, 3), ('FifthDep', 15, 1);

CREATE TABLE IF NOT EXISTS "employees" (
	id SERIAL PRIMARY KEY,
	name VARCHAR, 
	last_name VARCHAR,
	hire_date DATE,
	salary INTEGER,
	email VARCHAR,
	manager_id INTEGER,
	department_id INTEGER
);

INSERT INTO employees (name, last_name, hire_date, salary, email, manager_id, department_id) VALUES 
('Alex', 'Morgan', '2023-04-15', 1000, NULL , 1, 1),
('Victor', 'Mosesfactor', '2023-04-23', 1200, 'victor@user.com', 2, 2),
('Angelo', 'Monteriggione', '2023-04-27', 1300, 'angelo@dualbootpartners.com', 3, 3),
('Niclas', 'Bendtner', '2023-04-01', 900, 'niclas@user.com', 4, 4),
('Isiah', 'Mall', '2023-04-11', 1111, NULL, 5, 5),
('Marcus', 'Oliver', '2023-03-15', 550, 'marcus@user.com', 4, 2),
('Mark', 'Dean', '2023-03-18', 1500, NULL, 3, 5),
('Sara', 'Koval', '2023-03-25', 1250, 'sara@dualbootpartners.com', 4, 1),
('Veronica', 'Fuentes', '2022-04-16', 1234, 'veronica@user.com', 3, 5),
('Callum', 'McAllister', '2023-04-12', 2100, NULL, 4, 3),
('Utah', 'Jazz', '2023-04-11', 1900, NULL, 5, 2),
('Eugene', 'Alexeeva-Apollonova', '2019-04-15', 1000, 'eugene@user.com', 5, 3),
('Ons', 'Jabeur', '2020-04-15', 2400, 'ons@dualbootpartners.com', 2, 4),
('Yuri', 'Gagarin', '2023-04-11', 700, NULL, 2, 5),
('Randy', 'Couture', '2023-04-30', 1100, 'randy@user.com', 2, 3),
('Curtis', 'Jackson', '2023-04-22', 888, 'curtis@dualbootpartners.com', 1, 2),
('Lance', 'Henriksson', '2022-04-27', 1200, 'lance@user.com', 1, 5),
('Pauline', 'Vrai-Maudite', '2023-02-15', 1234, NULL, 3, 4),
('Vince', 'Carter', '2020-04-15', 1223, 'vince@dualbootpartners.com', 2, 5),
('Ronda', 'Rousie', '2023-01-15', 1122, 'ronda@user.com', 3, 4),
('Xander', 'Cage-Luther', '2021-06-15', 650, NULL, 5, 5),
('Nina', 'Pearce', '2021-04-15', 1234, 'nina@dualbootpartners.com', 2, 3);


ALTER TABLE employees ADD CONSTRAINT fk_manager_id FOREIGN KEY (manager_id) REFERENCES employees(id);

ALTER TABLE employees ADD CONSTRAINT fk_department_id FOREIGN KEY (department_id)  REFERENCES departments (id);

ALTER TABLE departments ADD CONSTRAINT fk_manager_id FOREIGN KEY (manager_id)  REFERENCES employees (id);



ЗАПРОСЫ:

1) Показать работников у которых нет почты или почта не в корпоративном домене (домен dualbootpartners.com)
SELECT  id, name, last_name 
FROM employees AS e 
WHERE email IS NULL OR email NOT LIKE '%dualbootpartners.com';   


2) Получить список работников нанятых в последние 30 дней
SELECT  id, name, last_name, hire_date 
FROM employees AS e 
WHERE hire_date >now() - interval '30 day' ORDER BY hire_date DESC;

3) Найти максимальную и минимальную зарплату по каждому департаменту
SELECT d.name, MAX(e.salary) AS MaxSalary, MIN(e.salary) AS MinSalary 
FROM employees AS e RIGHT JOIN departments AS d ON e.department_id = d.id GROUP BY d.id;


4) Посчитать количество работников в каждом регионе
SELECT r.name, COUNT(e.id) AS TOTAL 
FROM employees AS e JOIN departments AS d ON e.department_id = d.id 
JOIN locations AS l ON d.location_id = l.id JOIN regions AS r ON l.region_id = r.id GROUP BY r.id;

5) Показать сотрудников у которых фамилия длиннее 10 символов
SELECT id, last_name, length(last_name) AS chars 
FROM employees WHERE length(last_name) > 10 ORDER BY chars DESC;

6) Показать сотрудников с зарплатой выше средней по всей компании
SELECT last_name, salary FROM employees 
WHERE salary > (SELECT AVG(salary) FROM employees) ORDER BY salary DESC;

